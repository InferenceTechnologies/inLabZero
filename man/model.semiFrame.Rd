% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sfModel.R
\name{model.semiFrame}
\alias{model.semiFrame}
\alias{model}
\alias{model.semiTable}
\title{Modeling}
\usage{
\method{model}{semiFrame}(
  obj,
  data = "map",
  type = NULL,
  model = NULL,
  method = NULL,
  br = 2,
  brMethod = "median",
  splitRatio = 1,
  formula = ProbeYield ~ .,
  balance = FALSE,
  balanceCol = NULL,
  seed = NULL,
  classLevel = NULL,
  dataType = "PC",
  svmType = NULL,
  remAllNARow = FALSE,
  genStat = TRUE,
  toFactor = TRUE,
  mapDiceOnly = TRUE,
  colNameBase = "map",
  verbose = TRUE,
  ...
)

\method{model}{semiTable}(...)
}
\arguments{
\item{obj}{\code{semiTable} or \code{semiFrame} object.}

\item{data}{Character. A \code{semiFrame} object can store models on both parametric and map data. Choose
\itemize{
  \item{ "par" }{ for model on parameters. }
  \item{ "map" }{ for model on maps. }
  \item{ "last" }{ for last modified model. }
}}

\item{type}{Character. Specifies type of the model (default: \code{NULL}): 
\itemize{
  \item{ "class" }{ Classification models. }
  \item{ "reg" }{ Regression models. }
  \item{ "cluster" }{ Clustering. }
  \item{ "dim" }{ Dimensionality reduction. }
}}

\item{model}{Character. Specifies the particular model (default: \code{NULL}). 

Regression and classification models:
\itemize{
  \item{ "lin" }{ Linear model. For more information see \code{?stats::lm} and \code{?stats::glm}. }
  \item{ "cart" }{ Classification And Regression Tree. For more information see \code{?rpart::rpart}.}
  \item{ "forest" }{ Classification and Regression with Random Forest. For more information see \code{?randomForest::randomForest}. }
  \item{ "boost" }{ Generalized Boosted Regression. For more information see \code{?gbm::gbm}.}
  \item{ "xboost" }{ eXtreme Gradient Boosting. For more information see \code{?xgboost::xgb.train}. }
  \item{ "bayes" }{ Naive Bayes Classifier. For more information see \code{?e1071::naiveBayes}.}
  \item{ "knn" }{ k-Nearest Neighbour Classification. For more information see \code{?class::knn}. }
  \item{ "svm" }{ Support Vector Machines. For more information see \code{?kernlab::ksvm}. }
  \item{ "nnet" }{ Fit Neural network. For more information see \code{?nnet::nnet}. }
}
Clustering:
\itemize{
  \item{ "kmeans" }{ K-Means Clustering. For more information see \code{?kmeans}. }
  \item{ "kkmeans" }{ Kernel k-means. For more information see \code{?kernlab::kkmeans}. }
  \item{ "dbscan" }{  Density-based spatial clustering of applications with noise. For more information see \code{?dbscan::dbscan}. }
  \item{ "hdbscan" }{ Hierarchical density-based spatial clustering of applications with noise. For more information see \code{?dbscan::hdbscan}. }
  \item{ "optics" }{ Ordering points to identify the clustering structure. For more information see \code{?dbscan::optics}.}
}
Dimensionality reduction:
\itemize{
  \item{ "pca" }{  Principal Component Analysis. For more information see \code{?prcomp}. }
}}

\item{method}{Character. Provides additional information about a model (default: \code{NULL}):
\itemize{
  \item{ "cart" }{ if not specified, automatically determines if \code{class} or \code{anova} method should be applied. }
  \item{ "svm" }{ method specifies the output: }
        \itemize{
          \item{ "p" }{ probabilities. }
          \item{ "pr" }{  response determined by highest probabilities. }
          \item{ "r" }{  response. }
        }
}}

\item{br}{Vector. Breaks of the response parameter. Works in conjunction with \code{brMethod} setting.
Single integer value determines number of breaks. Vector of \code{length>1} can be numerical,
character or POSIXct and represents interval breaking points. Special character values "min", "mean",
"median", "max" and "seq" can be used (default: 2).}

\item{brMethod}{Character. Relevant for classification of noncategorical responses. Works in conjunction with \code{br} setting.
Split methods:
\itemize{
  \item{ "median" }{ Breaks the response parameter with \code{median} (default). }
  \item{ "mean" }{ Breaks the response parameter with \code{mean}. }
  \item{ "thr" }{ Breaks the response parameter with threshold value specified by \code{br}. }
  \item{ "linear" }{ Breaks the response parameter into equidistant intervals, number of splits is given
   by \code{br}. }
}}

\item{splitRatio}{Numeric. Represents the split ratio between train and test set. A splitRatio of 0.7 denotes that 70 percent of the data will be used for training and 30 percent for testing (default: 1).}

\item{formula}{Standard formula input, which characterizes the response parameter and the input parameters (default: \code{ProbeYield ~ .}).}

\item{balance}{Numeric. In binary classifications used to balance positive and negative cases in the train set.
\code{balance} parameter defines the multiple of the number of positive cases to be sampled out of negative cases. By default
these negative cases are sampled from the response variable, use \code{balanceCol} to employ a custom variable for sampling. (default: \code{FALSE}).}

\item{balanceCol}{Character. Defines column name of the variable for negative cases sampling (default: \code{NULL}).}

\item{seed}{Integer. Sets the seed of the random number generator (default: \code{NULL}).}

\item{classLevel}{Specifies custom level names for classification modeling (default: \code{NULL}).}

\item{dataType}{Character. Data type of variable group that will be used as the input for modeling (default: "PC").}

\item{svmType}{Support Vector Machines specific parameter. See \code{type} parameter in \code{?kernlab::ksvm} for more information.}

\item{remAllNARow}{Logical. If \code{TRUE} all rows containing \code{NAs} will be discarded (default: \code{FALSE}).}

\item{genStat}{Logical. If \code{TRUE} model statistics are generated (default: \code{TRUE}).}

\item{toFactor}{Logical. If \code{TRUE} non numeric columns will be converted into factors (default: \code{TRUE}).}

\item{mapDiceOnly}{Logical. If \code{TRUE} only cells with dice will be used for maps modeling (default: \code{TRUE}).}

\item{colNameBase}{Character. Column name base for map data modeling (default: "map").}

\item{verbose}{Logical. If \code{FALSE} turns off function messages (default: \code{TRUE}).}

\item{...}{Parameters passed to the model implementation.}
}
\value{
Copy of the \code{obj} object with the model specific output.
}
\description{
Models wrapper to perform regression, classification, clustering and dimensionality reduction.
}
\examples{

data(wbm)
data(pcy)

# Perform clustering on all wafer bin maps applying the 'kmeans' method with 9 user defined centroids
wbm <- model(wbm, data="map", type="cluster", model="kmeans", centers=9)  

# Train CART classification of 'ProbeYield'(median response split by default) on all parameters
pcy <- model(pcy, type="class", model="cart", formula="ProbeYield~ .")

# Train Random forest classification
pcy <- model(pcy, type="class", model="forest", formula=ProbeYield~.)

# Train eXtreme Gradient Boosting on non-balanced data with a defined 0.7/0.3 train/test data split
pcy <- model(pcy, type="class", model="xboost", formula="clear ~ . ", splitRatio=0.7, nrounds=10, max_depth=5)

# Train Random forest classification on balanced data with a defined 0.7/0.3 train/test data split
pcy <- model(pcy, type="class", model="forest", formula=edge ~ ., splitRatio=0.7, balance=1.5, balanceCol="clear")

}
