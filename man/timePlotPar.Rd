% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sfGraphics.R
\name{timePlotPar}
\alias{timePlotPar}
\title{Timeseries Plot Parameters}
\usage{
timePlotPar(...)
}
\arguments{
\item{...}{Numeric, character or function. 

Root parameters:
\itemize{ 
  \item{ \code{colors} }{ Color schemes. }
  \item{ \code{pch} }{ Plot points symbols. } 
  \item{ \code{cexAxis} }{ Magnification of axis annotation. }
  \item{ \code{mgp} }{ Margin line (in ‘mex’ units) for the axis title, axis, labels and axis line. } 
  \item{ \code{ticks} }{ Number of shown tickmarks. } 
  \item{ \code{grid} }{ Chart grid. } 
  \item{ \code{lwd} }{ Smoothed lines width. }
  \item{ \code{legend} }{ Legend parameters. }
}
\code{colors} parameters:
\itemize{
  \item{ \code{colors.zLevel} }{ Color scheme for categorical variables. }
  \item{ \code{colors.zBr} }{ Color scheme for numerical variables. }
  \item{ \code{colors.line} }{ Colors of smoothed lines. }
  \item{ \code{colors.box.border} }{ Color of box border for \code{chart} box type (default: "#525252"). }
  \item{ \code{colors.box.fill} }{ Color of box fill for \code{chart} box type (default: "#D9D9D9").  }
  \item{ \code{colors.alpha} }{ Color transparency setting per chart type (default: 0.8).  }
}
\code{grid} parameters:
\itemize{
  \item{ \code{grid.lty} }{ Grid lines type (default: 3). }
  \item{ \code{grid.color} }{ Grid lines color (default: "grey"). }
  \item{ \code{grid.xy} }{ Visibility of grid lines corresponding to x and y axis respectively (default: \code{FALSE} \code{FALSE}). }
}
\code{legend} parameters:
\itemize{
  \item{ \code{legend.pos} }{ Legend position (default: "topright"). }
  \item{ \code{legend.signif} }{ Number of significant digits (default: 3). }
}}
}
\description{
Gets, sets and reloads default visual parameters of timePlot.
}
\details{
Use parameter names to get values, use assignment to set parameter
values and use keyword \code{default} to load default values.
}
\examples{

data(pcy)

# Plot first variable from the group
timePlot(pcy, 1)

\dontrun{# Various ways to input variables for plotting 
# Use console for browsing
var <- 10
timePlot(pcy, 1, c(1,5), c(1:5), c(var), c("PARAM03"), 1:5, 8:-1, PARAM01, PARAM08:last)
}
# Select numerical z variable with input by index
timePlot(pcy, UPYield, z=1)
# Select categorical z variable with input by name
timePlot(pcy, 1, z="siteid", zLevel=c(1,5), chart="r")
# Special keyword "all" for all levels
timePlot(pcy, 1, z="siteid", zLevel="all", chart="r")
# Select date type z variable
timePlot(pcy, 1, z="pcStartDate", zBr=as.POSIXct(c("2012/01/01", "2013/01/01", "2014/01/01")))

# Filter outliers
timePlot(pcy[pcStartDate>"2014/01/01"], UPYield, outlier=10, z=1, zOutlier=3, chart="box")

# Plot points as a sequence
timePlot(pcy, UPYield, zBr=5, sequence=TRUE)

# Break numerical variables into intervals
# No break
timePlot(pcy, 1, zBr=1)
# Breaking by median
timePlot(pcy, 1, zBrMethod="median")
# br keywords seq, min, median, mean and max together with values
timePlot(pcy, 1, zBr=c("min","5.6", "seq(20, 80, length.out=3)", "max"))

# Plot rolling average with rolling window length of 30
timePlot(pcy, 1, smooth="r", rWin=30)
# Plot rolling median with center alignment
timePlot(pcy, 1, chart="r", rWin=30, rFun="median", rAlign="center")
# Add polynomial fit 
timePlot(pcy, 1, smooth="pol", polDegree=3)
# Plot polynomial fit line only 
timePlot(pcy, 1, chart="pol", polDegree=3)

# Use different y axes for different variables and with custom y limits
timePlot(pcy, 1, 2, chart="r", yAxisEach=TRUE, yLim=c(20,24), yLimRight=c(550,650)) 

# Logarithmic scale of the y axis
timePlot(pcy, 1, chart="p", yLog=TRUE, main="Log y axis")

# Hide legend
timePlot(pcy, 1, showLegend=FALSE)

# Change draw order of points
timePlot(pcy, 2, drawOrder=c(2,1))

# Print all visual parameters
timePlotPar()
# Get value of a visual parameter
timePlotPar(colors.zBr)
# Set breaking colors to red and green and legend position to top left
timePlotPar(colors.zBr=c("red", "green"), legend.pos="topleft")

# Reload default visual parameters
timePlotPar(default)
}
