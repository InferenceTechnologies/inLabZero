% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sfGraphics.R
\name{defBayesOptimPlot}
\alias{defBayesOptimPlot}
\title{Bayes Defectivity Optimization Plot}
\usage{
defBayesOptimPlot(
  obj,
  step,
  defCount = 0:3,
  chart = "prob",
  main = NULL,
  plot = TRUE,
  returnProb = FALSE,
  core = "auto",
  optimObj = NULL,
  showLegend = TRUE,
  forceGC = TRUE,
  verbose = TRUE,
  ...
)
}
\arguments{
\item{obj}{List of \code{semiTable} objects representing defects per die datasets each constituting one optimization step.}

\item{step}{Character. Defines single manufacturing step.}

\item{defCount}{Integer. Defines range of defects per die cases. Any higher defects per die cases are always included
in the highest specified case (default: 0:3).}

\item{chart}{Character. Specifies chart type: "prob" (default) for conditional probability optimization 
or "yield" for yield loss explained optimization.}

\item{main}{Character. Main title.}

\item{plot}{Logical. If \code{FALSE} optimization object is returned. If in addition \code{returnProb=TRUE}, probability data is returned (default: \code{TRUE}).}

\item{returnProb}{Logical. If \code{TRUE} in combination with \code{plot=FALSE}, probability data is returned (default: \code{FALSE}).}

\item{core}{Integer. Specifies number of cores for parallel computation.}

\item{optimObj}{\code{semiTable} optimization object (default: NULL).}

\item{showLegend}{Logical. If \code{TRUE} legend is displayed.}

\item{forceGC}{Logical. If \code{TRUE} garbage collection will be forced during computations (default: \code{TRUE}).}

\item{verbose}{Logical. If \code{FALSE} turns off function messages (default: \code{TRUE}).}

\item{...}{Parameters passed to \code{defBayesPlot}.}
}
\value{
Plot or probability data.
}
\description{
Bayes defectivity optimization using conditional probabilities and yield loss explained.
}
\examples{

##############################################
# Examples for defBayesOptimPlot - To be added
##############################################

# Print all visual parameters
defBayesOptimPlotPar()
     
# Set color setting for the "yield" chart to red
defBayesOptimPlotPar(color.yield="red")

# Get color setting for the "prob" chart
defBayesOptimPlotPar(color.prob)     

# Reload default visual parameters
defBayesOptimPlotPar(default)
}
