% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sfGraphics.R
\name{timePlot}
\alias{timePlot}
\title{Timeseries Plot}
\usage{
timePlot(
  obj,
  ...,
  outlier = NULL,
  z = c("ProbeYield", "UPYield"),
  zBr = 2,
  zBrMethod = "yieldHeat",
  zLevel = NULL,
  zOutlier = NULL,
  smooth = FALSE,
  sequence = FALSE,
  yAxisEach = FALSE,
  chart = "p",
  main = NULL,
  numMain = TRUE,
  showLegend = TRUE,
  rWin = 10,
  rFun = mean,
  rAlign = "right",
  polDegree = 20,
  yLim = NULL,
  yLimRight = NULL,
  yLog = FALSE,
  autoNorm = TRUE,
  drawOrder = NULL,
  timeCol = "pcStartDate",
  useDataType = sfUseDataType,
  col = NULL
)
}
\arguments{
\item{obj}{\code{semiTable} or \code{semiFrame} object.}

\item{...}{Data columns to be plotted. Each column can be entered in following forms:
\itemize{
  \item{ integers } { Specify column indexes in the column group given by
    \code{useDataType} parameter. }
  \item{ characters }{ Specify column names. Both character vectors or strings without quotes
    can be used. } 
} 
If \code{yAxisEach = FALSE} browsing mode is activated if multiple columns are provided.
If \code{yAxisEach = TRUE} all columns are plotted into one chart.}

\item{outlier}{Numeric. Outlier filtering of data column before plotting. Outliers are data points outside the
interval <(Q1-k1*IQR),(Q3+k2*IQR)>, where Q1 and Q3 are quartiles, IQR is interquartile range and
k1 and k2 are values specified by \code{outlier} parameter as its first and second element. 
If single value is provided, k1 = k2 setting is used. No outlier filtering is applied by default.}

\item{z}{Vector. Specifies column for \code{z} axis. This column can be broken into intervals 
using \code{zBr} and \code{zBrMethod} for numerical variables and using \code{zLevel} for 
categorical variables. Subsets of data column corresponding to \code{z} column breaks are 
then plotted with different colors. Input methods:
\itemize{
  \item{ integers } { Specify column indexes in the column group given by
    \code{useDataType} parameter. }
  \item{ characters }{ Specify column names. } 
} 
First found match is used when multivalued vector is provided.}

\item{zBr}{Vector. Breaks of a numeric \code{z} column, works in conjunction with \code{zBrMethod} 
setting. Single integer value determines number of breaks. Vector of \code{length>1} can be numerical,
character or POSIXct and represents interval breaking points. Special character values "min", "mean",
"median", "max" and "seq" can be used.}

\item{zBrMethod}{Character. Relevant for numeric \code{z} columns, works in conjunction with \code{zBr} setting. 
Split methods:
\itemize{
  \item{ "median" }{ Breaks \code{z} column with \code{median}. }
  \item{ "mean" }{ Breaks \code{z} column with \code{mean}. }
  \item{ "thr" }{ Breaks \code{z} column with threshold value specified by \code{zBr}. }
  \item{ "yieldHeat" }{ Corresponds to \code{zBr=c("seq(min, median, length.out=brValue)", "max")}, 
   where \code{brValue} is the value specified by \code{zBr}. }
  \item{ "linear" }{ Breaks \code{z} column into equidistant intervals, number of splits is given
   by \code{zBr}. }
  \item{ "hist" }{ Breaks \code{z} column using graphic's \code{hist} function. Values
   are passed to hist's \code{breaks} parameter using \code{zBr}. }
}}

\item{zLevel}{Vector. Non-null value indicates a categorical \code{z} column. Specifies which categories to use
for split. Use special value "all" to include all categories.}

\item{zOutlier}{Numeric. Outlier filtering of \code{z} column before plotting. For more details 
see \code{outlier} parameter.}

\item{smooth}{Character. Adds smoothing to the chart. Possible values are:
\itemize{
  \item{ "r" } { Rolling function (average by default). }
  \item{ "pol" }{ Polynomial fit. } 
}}

\item{sequence}{Logical. If \code{FALSE} (default) \code{timeCol} is used for x axis. If TRUE points are 
plotted as equidistant sequence.}

\item{yAxisEach}{Logical. If \code{TRUE} new y axis is provided for each data column (default: \code{FALSE}).}

\item{chart}{Character. Specifies chart type. Possible values are: 
\itemize{
  \item{ "p" } { Points (default). }
  \item{ "r" }{ Rolling function line (average by default). } 
  \item{ "pol" }{ Polynomial fit line. } 
  \item{ "box" }{ Box plot. } 
}}

\item{main}{Character. Main title.}

\item{numMain}{Logical. When \code{TRUE} index of plotted column within corresponding \code{useDataType}
is included into the main title.}

\item{showLegend}{Logical. If \code{TRUE} legend is displayed.}

\item{rWin}{Integer. Length of rolling window for rolling average charting (default: 10).}

\item{rFun}{Function applied to rolling window points. For example \code{mean} (default), 
\code{median} or \code{sd}.}

\item{rAlign}{Character. Specifies rolling window alignment. Possible values are 
"left", "center" and "right" (default).}

\item{polDegree}{Integer. Specifies degree of polynomial for polynomial fit charting (default: 20).}

\item{yLim}{Numeric. User defined y axis limits. Vector of length 2.}

\item{yLimRight}{Numeric. Custom right y axis range (default: \code{NULL}).}

\item{yLog}{Logical. If \code{TRUE} y axis is depicted in logarithmic scale.}

\item{autoNorm}{Logical. If \code{TRUE}, data prior normalization is restored for plotting.}

\item{drawOrder}{Integer. Specifies drawing order.}

\item{timeCol}{Character. Specifies column for date&time x axis (default: "pcStartDate").}

\item{useDataType}{Character. Specifies \code{obj} column group for integer column indexing.
First found match is used when multivalued vector is provided. 
See \code{\link{dataType}} for more information on data types.}

\item{col}{Character. Direct column input using character column names or integer column indices (default: \code{NULL}).}
}
\value{
Plot.
}
\description{
Plots a \code{semiTable} or \code{semiFrame} data column as timeseries. Chart colors are based
on \code{z} axis column.
}
\examples{

data(pcy)

# Plot first variable from the group
timePlot(pcy, 1)

\dontrun{# Various ways to input variables for plotting 
# Use console for browsing
var <- 10
timePlot(pcy, 1, c(1,5), c(1:5), c(var), c("PARAM03"), 1:5, 8:-1, PARAM01, PARAM08:last)
}
# Select numerical z variable with input by index
timePlot(pcy, UPYield, z=1)
# Select categorical z variable with input by name
timePlot(pcy, 1, z="siteid", zLevel=c(1,5), chart="r")
# Special keyword "all" for all levels
timePlot(pcy, 1, z="siteid", zLevel="all", chart="r")
# Select date type z variable
timePlot(pcy, 1, z="pcStartDate", zBr=as.POSIXct(c("2012/01/01", "2013/01/01", "2014/01/01")))

# Filter outliers
timePlot(pcy[pcStartDate>"2014/01/01"], UPYield, outlier=10, z=1, zOutlier=3, chart="box")

# Plot points as a sequence
timePlot(pcy, UPYield, zBr=5, sequence=TRUE)

# Break numerical variables into intervals
# No break
timePlot(pcy, 1, zBr=1)
# Breaking by median
timePlot(pcy, 1, zBrMethod="median")
# br keywords seq, min, median, mean and max together with values
timePlot(pcy, 1, zBr=c("min","5.6", "seq(20, 80, length.out=3)", "max"))

# Plot rolling average with rolling window length of 30
timePlot(pcy, 1, smooth="r", rWin=30)
# Plot rolling median with center alignment
timePlot(pcy, 1, chart="r", rWin=30, rFun="median", rAlign="center")
# Add polynomial fit 
timePlot(pcy, 1, smooth="pol", polDegree=3)
# Plot polynomial fit line only 
timePlot(pcy, 1, chart="pol", polDegree=3)

# Use different y axes for different variables and with custom y limits
timePlot(pcy, 1, 2, chart="r", yAxisEach=TRUE, yLim=c(20,24), yLimRight=c(550,650)) 

# Logarithmic scale of the y axis
timePlot(pcy, 1, chart="p", yLog=TRUE, main="Log y axis")

# Hide legend
timePlot(pcy, 1, showLegend=FALSE)

# Change draw order of points
timePlot(pcy, 2, drawOrder=c(2,1))

# Print all visual parameters
timePlotPar()
# Get value of a visual parameter
timePlotPar(colors.zBr)
# Set breaking colors to red and green and legend position to top left
timePlotPar(colors.zBr=c("red", "green"), legend.pos="topleft")

# Reload default visual parameters
timePlotPar(default)
}
